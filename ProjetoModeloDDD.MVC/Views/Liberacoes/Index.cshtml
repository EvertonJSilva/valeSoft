@model IEnumerable<ProjetoModeloDDD.MVC.ViewModels.LiberacaoViewModel>
@using GridMvc.Html
@{
    ViewBag.Title = "Liberações";
}

<h2>Liberações</h2>

<hr />
@using (Html.BeginForm("Index", "Liberacoes", FormMethod.Get))
{
    <p>
        Localizar por:
        <div class="form-group">

            @Html.DropDownList("LocalizarPor", new SelectList(new List<SelectListItem>
                                {
                                    new SelectListItem { Selected = true, Text = "Nome Paciente", Value = "2"},
                                    new SelectListItem { Selected = false, Text = "Liberação", Value = "1"},
                                }, "Value", "text", @ViewBag.LocalizarPor)
                     , new { @class = "form-control", @style = "float:left", })

            @Html.TextBox("palavra", ViewBag.palavra as string, new { @class = "form-control", @type = "text", @placeholder = "Digite...", @style = "float:left" })
            &nbsp;
            <button type="submit" class="btn btn-theme">Pesquisar</button>
            &nbsp;
            @Html.ActionLink("Criar Novo", "Create", null, new { @class = "btn btn-theme", @style = "background-color:#174e9b" })

        </div>
    </p>
}
<div style="margin-right:50px">
    @Html.Grid(Model).Columns(columns =>
{
    columns.Add(model => model.Paciente.NomePaciente).Titled("Nome");
    columns.Add(model => model.Profissional.NomeProfissional).Titled("Profissional");
    columns.Add(model => model.NumeroLiberacao).Titled("Número da liberação");
    columns.Add(model => model.QuantidadeTotal).Titled("Quantidade Solicitada");

    columns.Add()//model => model.QuantidadeRealizada).Titled("Quantidade realizada");
    .Sortable(true)
    .Filterable(true)
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(o => QuantidadeCustonHelper(o.QuantidadeRealizada, o.QuantidadeTotal))
    .Titled("Quantidade realizada");//.Css("grid-header-title");
    

    columns.Add(model => model.MedicoEncaminhante).Titled("Medico Encaminhante");
    columns.Add(model => model.CRM).Titled("CRM");

    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(o => SalvarCustonHelper(o.LiberacaoId));
    
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(o => EditarCustonHelper(o.LiberacaoId));
    columns.Add()
        .Encoded(false)
        .Sanitized(false)
        .SetWidth(30)
        .RenderValueAs(o => DeletarCustonHelper(o.LiberacaoId));

}).WithPaging(20, 0, "grid1page").Sortable(true)
</div>


@helper QuantidadeCustonHelper(int realizado, int total)
{
    if ((realizado + 2) >= total)
    {
       <label style="color:red">@realizado</label>
    }
    else
    {
            <label>@realizado</label>
    }
}




@helper SalvarCustonHelper(int id)
{
    <tooltip title ="Detalhes">
        <button class="btn btn-success btn-xs" onclick="location.href='@Url.Action("Details", "Liberacoes", new { id = id })'"><i class="fa fa-check"></i></button>
    </tooltip>
}

@helper EditarCustonHelper(int id)
{
    <tooltip title="Editar">
        <button class="btn btn-primary btn-xs" onclick="location.href='@Url.Action("Edit", "Liberacoes", new { id = id })'"><i class="fa fa-pencil"></i></button>
    </tooltip>
}

@helper DeletarCustonHelper(int id)
{
    <tooltip title="Excluir">
        <button class="btn btn-danger btn-xs" onclick="location.href='@Url.Action("Delete", "Liberacoes", new { id = id })'"><i class="fa fa-trash-o "></i></button>
    </tooltip>
}




